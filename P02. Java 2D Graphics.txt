P02> Java 2D Graphics

1. Swing 라이브러리
-> java.awt.Graphics 클래스 
	=> 좌표를 실수로 받음
	
-> life cycle method GUI
	=> (on)paint(onDraw) method: 화면을 그릴 때 해야하는 일들을 그리는 메소드
	=> 이 메소드들이 실행되는 시기는 system이 결정함. (system 결정 하에 자동으로 실행)
	=> 이 메소드 내부에는 살행해야 할 내용을 구현하면 된다 (그리는 코드)

-> static inner class
	=> inner class의 메소드에서 outer class의 this를 사용할 수 있으나(outer class의 인스턴스 사용 가능)
		static inner class의 경우는 사용못함.
	
-> @Override         
	public void paint(Graphics graphics) {...}
	=> 부모 클래스의 메소드 재정의
	=> 여기서는 내용을 더함 (super.paint(graphics); ...)

-> g.fill(rect); => 내부를 칠하는 메소드
   g.draw(rect); => 모양에 맞게 그리는 메소드
	=> fill 메소드가 먼저, 후에 draw 메소드를 호출해야 원하는 크기에 맞춰서 그리기 가능

-> g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); 
	=> 그래픽 품질 향상을 위해서 사용하는 메소드
	=> 차지하는 공간의 비율대로 색을 섞어 보여줌
	=> 기능을 키기 전보다 더 자연스러워 보임 (해상도가 높아보이는 효과)
	=> 단, 품질을 향상시키면 속도 저하 가능성 있음

	
2. Color 클래스
-> new Color(0f, 0f, 0f) => 검정색 
   new Color(1f, 1f, 1f) => 흰색 
   => 생성자 매개변수 타입은 float 타입이므로 숫자 뒤에 항상 'f'를 붙여야 한다
   
-> Color(float red, float green, float blue, float alpha); 
	=> 생성자 매개변수 순서 (r, g, b, (alpha))
	=> alpha 파라미터 값은 투명도 지정 (값의 범위: 0.0 ~ 1.0 / 0->투명, 1->불투명)
	=> alpha값이 0이면 완전 투명 1이면 완전 불투명
	






