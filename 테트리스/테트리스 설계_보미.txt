1.Point 클래스 {
--변수
	int x, y; // x, y 좌표

--메소드
	public Point(int x, int y) { } // 생성자, 좌표값 지정
	public void move(int xPlus, int yPlus) { }; // x, y 좌표 매개변수 만큼 이동
	public int getX() { } // x 좌표 반환
	public int getY() { } // y 좌표 반환
	public void setXY(int x, int y) { } // x, y 좌표값 설정
  }

2. Block 클래스 (부모 클래스) {
--변수
	JPanel[] panel;
	Point[] point; // 현재 포인트
	Point[][] point_info; // 각 각도별 포인트 정보(앞:각도/뒤:패널 개수)
	
	Point currentXY; // 현재 좌표
	int cnt_pan; // 패널 개수
	int cnt_ang; // 각도 개수
	int angle; // 각도 값
	int xLength; // 가로 길이

--메소드
	public Block(int area, int cnt_ang, int cnt_pan, int xLength) { }; // 생성자, 각도 개수, 패널 개수, 포인트 등 값 초기화, 패널 생성
	public void setBlock(Container c) { } // 컨테이너에 등록
	public void setDefaultLocation() { } // 시작할 때의 위치를 조정
	public void setNextLocation() { } // 다음의 위치를 조정
	public void setReadyLocation() { } // 대기상태 위치를 조정
	public void setCurrentXY() { } // 현재 위치를 조정
	public Point getCurrentXY() { } // 현재 위치 반환
	public Point[] getPoint() { } // 현재 포인트 반환
	public Point[] getNextPoint() { } // 다음 차례의 각도로 회전했을 시 포인트 정보 반환
	public int getCurrentAngle() { } // 현재 각도 반환
	public void rotate() { } // 회전할 각도 지정, 이동
	public void setMove() { } // 포인트 정보를 패널에 적용하여 이동
	public void Down() { } // 좌표를 이용하여 아래로 한칸 이동
	public void right() { } // 좌표를 이용하여 오른쪽으로 한칸 이동
	public void left() { } // 좌표를 이용하여 왼쪽으로 한칸 이동
  }

3. shapeOfO 클래스 (자식 클래스) {
--메소드
	public shapeOfO(int area, Container c, int xLength) { } // 생성자, 도형의 각도별 포인트 설정
  }

4. shapeOfL 클래스 (자식 클래스) {
--메소드
	public shapeOfO(int area, Container c, int xLength) { } // 생성자, 도형의 각도별 포인트 설정
  }

5. shapeOfJ 클래스 (자식 클래스) {
--메소드
	public shapeOfO(int area, Container c, int xLength) { } // 생성자, 도형의 각도별 포인트 설정
  }

6. shapeOfI 클래스 (자식 클래스) {
--메소드
	public shapeOfO(int area, Container c, int xLength) { } // 생성자, 도형의 각도별 포인트 설정
  }

7. shapeOfT 클래스 (자식 클래스) {
--메소드
	public shapeOfO(int area, Container c, int xLength) { } // 생성자, 도형의 각도별 포인트 설정
  }

8. shapeOfS 클래스 (자식 클래스) {
--메소드
	public shapeOfO(int area, Container c, int xLength) { } // 생성자, 도형의 각도별 포인트 설정
  }

9. shapeOfZ 클래스 (자식 클래스) {
--메소드
	public shapeOfO(int area, Container c, int xLength) { } // 생성자, 도형의 각도별 포인트 설정
  }

10. Tetris 클래스 {
--변수
	int width, height; // 가로, 세로
	int xCnt, yCnt; // 가로, 세로 배열 크기
	int area; // 넓이
	int time; // 빠르기
	
	boolean[][] grid;
	JPanel[][] background; // 배경패널

	Container c; // 컨테이너
	Block nextBlock; // 다음 나올 도형
	Block currentBlock; // 현재 도형
	
	ArrayList<Block> blockList; // 도형 리스트
	ArrayList<Color> colorList; // 색 리스트
	
	boolean isKey; // 키보드 활성화 여부
	Color bgColor; // 배경 색

--메소드
	public Tetris() { } // 생성자, 기본 설정(가로, 세로 길이 등), 배경, 도형 시작 설정
	public void setNextBlock() { } // 다음 도형 지정
	public void setBack(int x, int y, Color c) { } // 백그라운드에 블럭 채움
	public void setEmpty(int x, int y) { } // 백그라운드 블럭 삭제
	public void checkLine() { } // 줄이 가득 찼는지 확인, 찼으면 삭제
	public void deleteLine(int l) { } // 줄 삭제후 위의 줄 아래로 내림
	public void goRotate() { } // 회전이 가능한지 확인, 가능하면 회전
	public void goDown() { } // 아래로 이동이 가능한지 확인, 가능하면 아래로 한 칸 내림
	public void goRight() { } // 오른쪽으로 이동이 가능한지 확인, 가능하면 오른쪽으로 한 칸 이동
	public void goLeft() { } // 왼쪽으로 이동이 가능한지 확인, 가능하면 왼쪽으로 한 칸 이동
	public void keyPressed(KeyEvent e) { } // 키보드 액션 리스너
	public void keyReleased(KeyEvent e) { } // 
	public void keyTyped(KeyEvent e) { } //
	public void gameEnd() { } // 게임 종료 확인, 안내 메세지 띄움

	public static void main(String[] args) { } // 메인 메소드, 게임 실행
  }

http://kkikkodev.tistory.com/44

